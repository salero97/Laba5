#include <iostream>
#include <string>
#include <map>
#include <algorithm>

using namespace std;

// функция для вывода списка доступных команд
void printHelp() {
    cout << "Доступные команды:" << endl;
    cout << "CHANGE <регион> <центр> - создать/изменить регион" << endl;
    cout << "RENAME <старое_имя> <новое_имя> - переименовать регион" << endl;
    cout << "ABOUT <регион> - информация о регионе" << endl;
    cout << "ALL - список всех регионов" << endl;
    cout << "HELP - справка по командам" << endl;
    cout << "EXIT - выход из программы" << endl;
}

int main() {
    // создаем контейнер для хранения данных о регионах
    // map хранит пары "ключ-значение" (регион - административный центр)
    // и автоматически сортирует их по ключу
    map<string, string> regions;

    // выводим справочную информацию при запуске
    printHelp();

    // основной цикл программы - выполняется пока пользователь не введет EXIT
    while(true) {
        cout << "> Введите команду (или HELP): "; // приглашение ко вводу
        
        string query; // переменная для хранения введенной команды
        getline(cin, query); // считываем всю строку ввода
        
        // если введена пустая строка - пропускаем итерацию
        if(query.empty()) {
            cout << "Ошибка: пустой ввод. Повторите попытку.\n";
            continue;
        }
        
        // находим позицию первого пробела для разделения команды и параметров
        size_t spacePos = query.find(' ');
        string command = query.substr(0, spacePos); // извлекаем саму команду
        string params = spacePos != string::npos ? query.substr(spacePos + 1) : "";
        
        // преобразуем команду в верхний регистр для унификации сравнения
        transform(command.begin(), command.end(), command.begin(), ::toupper);

        if(command == "EXIT") {
            cout << "=== Завершение работы программы ===\n";
            break; // выход из цикла while
        }
        
        if(command == "HELP") {
            printHelp(); // вызываем функцию вывода справки
            continue; // переходим к следующей итерации
        }
        
        if(command == "CHANGE") {
            // ищем разделитель между названием региона и центром
            size_t sep = params.find(' ');
            
            // проверка корректности ввода параметров
            if(sep == string::npos) {
                cerr << "Ошибка: неверный формат команды.\n";
                cerr << "Используйте: CHANGE <регион> <центр>\n";
                continue;
            }
            
            // извлекаем название региона и административного центра
            string reg = params.substr(0, sep);
            string cntr = params.substr(sep + 1);
            
            // проверка существования региона в контейнере
            if(regions.find(reg) != regions.end()) {
                // если регион существует - обновляем его центр
                string oldCntr = regions[reg]; // сохраняем старый центр
                regions[reg] = cntr; // устанавливаем новый центр
                
                // формируем информативное сообщение об изменении
                cout << "=== Изменение административного центра ===\n";
                cout << "Регион: " << reg << "\n";
                cout << "Старый центр: " << oldCntr << "\n";
                cout << "Новый центр: " << cntr << "\n";
            } else {
                // если регион не существует - добавляем новую запись
                regions[reg] = cntr;
                
                // формируем сообщение о создании нового региона
                cout << "=== Добавлен новый регион ===\n";
                cout << "Регион: " << reg << "\n";
                cout << "Административный центр: " << cntr << "\n";
            }
        }
        else if(command == "RENAME") {
            size_t sep = params.find(' ');
            
            // проверка наличия обоих параметров
            if(sep == string::npos) {
                cerr << "Ошибка: неверный формат команды.\n";
                cerr << "Используйте: RENAME <старое_имя> <новое_имя>\n";
                continue;
            }
            
            // извлекаем старое и новое варианты названия
            string oldReg = params.substr(0, sep);
            string newReg = params.substr(sep + 1);
            
            // проверка всех возможных ошибок:
            if(regions.find(oldReg) == regions.end()) {
                cerr << "Ошибка: регион '" << oldReg << "' не найден.\n";
            } else if(oldReg == newReg) {
                cerr << "Ошибка: новое название совпадает со старым.\n";
            } else if(regions.find(newReg) != regions.end()) {
                cerr << "Ошибка: регион '" << newReg << "' уже существует.\n";
            } else {
                // если все проверки пройдены - выполняем переименование
                string cntr = regions[oldReg]; // сохраняем центр
                regions.erase(oldReg); // удаляем старую запись
                regions[newReg] = cntr; // создаем новую запись
                
                // выводим подробное сообщение о результате
                cout << "=== Регион успешно переименован ===\n";
                cout << "Старое название: " << oldReg << "\n";
                cout << "Новое название: " << newReg << "\n";
                cout << "Административный центр сохранен: " << cntr << "\n";
            }
        }
        else if(command == "ABOUT") {
            // проверка наличия параметра
            if(params.empty()) {
                cerr << "Ошибка: укажите название региона.\n";
                cerr << "Используйте: ABOUT <регион>\n";
                continue;
            }
            
            // проверка существования региона
            if(regions.find(params) == regions.end()) {
                cerr << "Ошибка: регион '" << params << "' не найден.\n";
            } else {
                // вывод информации о регионе
                cout << "=== Информация о регионе ===\n";
                cout << "Регион: " << params << "\n";
                cout << "Административный центр: " << regions[params] << "\n";
            }
        }
        else if(command == "ALL") {
            // проверка на пустоту контейнера
            if(regions.empty()) {
                cout << "Список регионов пуст.\n";
            } else {
                // форматированный вывод всех регионов
                cout << "=== Список всех регионов ===\n";
                cout << "---------------------------------------------\n";
                cout << "№  Регион\t\tАдминистративный центр\n";
                cout << "---------------------------------------------\n";
                
                // используем range-based for loop для обхода контейнера
                // с автоматической нумерацией, начиная с 1
                int counter = 1;
                for(const auto& [region, center] : regions) {
                    cout << counter++ << ". " << region << "\t\t" << center << "\n";
                }
                cout << "---------------------------------------------\n";
                cout << "Всего регионов: " << regions.size() << "\n";
            }
        }
        // ===== обработка неизвестной команды =====
        else {
            cerr << "Ошибка: неизвестная команда '" << command << "'\n";
            cerr << "Введите HELP для просмотра доступных команд.\n";
        }
    }
    
    return 0; // корректное завершение программы
}
